Knots  <- growth$age
norder <- 6
nbasis <- length(Knots) + norder - 2
hgtbasis <- create.bspline.basis(range(Knots), nbasis, norder, Knots)
Lfdobj <- 4
lambda <- 1e-2
growfdPar <- fdPar(hgtbasis, Lfdobj, lambda)
hgtfd <- smooth.basis(growth$age,
cbind(growth$hgtm,growth$hgtf),growfdPar)$fd
cbasis = create.constant.basis(range(Knots))
maleind = c(rep(1,ncol(growth$hgtm)),rep(0,ncol(growth$hgtf)))
constfd = fd( matrix(1,1,length(maleind)),cbasis)
maleindfd = fd( matrix(maleind,1,length(maleind)),cbasis)
xfdlist = list(constfd,maleindfd)
betalist = list(fdPar(hgtbasis,2,1e-6),fdPar(hgtbasis,2,1e-6))
Fres = Fperm.fd(hgtfd,xfdlist,betalist,nperm=10)
F.res2 = Fperm.fd(annualprec, xfdlist, betalist, nperm=10)
annualprec <- log10(apply(
CanadianWeather$dailyAv[,,"Precipitation.mm"], 2,sum))
#  set up a smaller basis using only 40 Fourier basis functions
#  to save some computation time
smallnbasis <- 40
smallbasis  <- create.fourier.basis(c(0, 365), smallnbasis)
tempfd      <- smooth.basis(day.5, CanadianWeather$dailyAv[,,"Temperature.C"],
smallbasis)$fd
constantfd <- fd(matrix(1,1,35), create.constant.basis(c(0, 365)))
xfdlist <- vector("list",2)
xfdlist[[1]] <- constantfd
xfdlist[[2]] <- tempfd[1:35]
betalist   <- vector("list",2)
#  set up the first regression function as a constant
betabasis1 <- create.constant.basis(c(0, 365))
betafd1    <- fd(0, betabasis1)
betafdPar1 <- fdPar(betafd1)
betalist[[1]] <- betafdPar1
nbetabasis  <- 35
betabasis2  <- create.fourier.basis(c(0, 365), nbetabasis)
betafd2     <- fd(matrix(0,nbetabasis,1), betabasis2)
lambda        <- 10^12.5
harmaccelLfd365 <- vec2Lfd(c(0,(2*pi/365)^2,0), c(0, 365))
betafdPar2    <- fdPar(betafd2, harmaccelLfd365, lambda)
betalist[[2]] <- betafdPar2
# Should use the default nperm = 200
# but use 10 to save test time for illustration
F.res2 = Fperm.fd(annualprec, xfdlist, betalist, nperm=10)
q()
q()
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
library(fda)
b1.1 <- create.bspline.basis(nbasis=1, norder=1)
y12 <- 1:2
fd1.1 <- Data2fd(y12, basisobj=b1.1)
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
fd1.1 <- Data2fd(y12, basisobj=b1.1)
plot(fd1.1)
fd1.1.5 <- Data2fd(y12, basisobj=b1.1, lambda=0.5)
eval.fd(seq(0, 1, .2), fd1.1.5)
b1.2 <- create.bspline.basis(nbasis=2, norder=1)
#  fit the data without smoothing
fd1.2 <- Data2fd(1:2, basisobj=b1.2)
op <- par(mfrow=c(2,1))
plot(b1.2, main='bases')
plot(fd1.2, main='fit')
par(op)
b1.1 <- create.bspline.basis(nbasis=1, norder=1)
# data values: 1 and 2, with a mean of 1.5
y12 <- 1:2
# smooth data, giving a constant function with value 1.5
fd1.1 <- Data2fd(y12, basisobj=b1.1)
plot(fd1.1)
fd1.1.5 <- Data2fd(y12, basisobj=b1.1, lambda=0.5)
eval.fd(seq(0, 1, .2), fd1.1.5)
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basisPar.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
help("with")
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basisPar.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basisPar.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basisPar.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
source('~/Documents/R/fda_revision/fda/R/Data2fd.R')
library(fda)
invasion1 <- as.Date('1775-09-04')
invasion2 <- as.Date('1812-07-12')
earlyUS.Canada <- c(invasion1, invasion2)
BspInvasion <- create.bspline.basis(earlyUS.Canada)
earlyYears <- seq(invasion1, invasion2, length.out=7)
(earlyQuad <- (as.numeric(earlyYears-invasion1)/365.24)^2)
fitQuad <- Data2fd(earlyYears, earlyQuad, BspInvasion)
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/monomialpen.R')
source('~/Documents/R/fda_revision/fda/R/monomialpen.R')
source('~/Documents/R/fda_revision/fda/R/monomialpen.R')
source('~/Documents/R/fda_revision/fda/R/basisfd.R')
source('~/Documents/R/fda_revision/fda/R/basisfd.R')
source('~/Documents/R/fda_revision/fda/R/monomialpen.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/monomialpen.R')
is.integer(1.2)
source('~/Documents/R/fda_revision/fda/R/basisfd.R')
source('~/Documents/R/fda_revision/fda/R/basisfd.R')
source('~/Documents/R/fda_revision/fda/R/basisfd.R')
source('~/Documents/R/fda_revision/fda/R/basisfd.R')
round(1.2)
source('~/Documents/R/fda_revision/fda/R/basisfd.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
class(earlyYears)
help("Date")
earlyYears
as.vector(earlyYears)
source('~/Documents/R/fda_revision/fda/R/basisfd.R')
AmRev.ct <- as.POSIXct1970(c('1776-07-04', '1789-04-30'))
BspRev.ct <- create.bspline.basis(AmRev.ct)
AmRevYrs.ct <- seq(AmRev.ct[1], AmRev.ct[2], length.out=14)
(AmRevLin.ct <- as.numeric(AmRevYrs.ct-AmRev.ct[1]))
AmRev.ct <- as.POSIXct1970(c('1776-07-04', '1789-04-30'))
BspRev.ct <- create.bspline.basis(AmRev.ct)
AmRevYrs.ct <- seq(AmRev.ct[1], AmRev.ct[2], length.out=14)
AmRevYrs.ct
(AmRevLin.ct <- as.numeric(AmRevYrs.ct-AmRev.ct[1]))
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
invasion1      <- as.Date('1775-09-04')
invasion2      <- as.Date('1812-07-12')
earlyUS.Canada <- c(invasion1, invasion2)
BspInvasion    <- create.bspline.basis(earlyUS.Canada)
earlyYears     <- seq(invasion1, invasion2, length.out=7)
(earlyQuad     <- (as.numeric(earlyYears-invasion1)/365.24)^2)
earlyYears
help("methods")
print(methods(class="Date"))
print(matlab.Date)
matplot.Date()
print(methods("matplot.Date"))
y = 1
deparse(substitute(y))
help("substitute")
help("deparse")
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
source('~/Documents/R/fda_revision/fda/R/smooth.basis.R')
help("news")
news()
source('~/Documents/R/fda_old/R/matplot.R')
source('~/Documents/R/fda_old/R/matplot.R')
install.packages(c("boot", "deSolve", "foreign", "MASS", "nlme", "stringi"), lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(fda)
q()
library(Rcpp)
rcpp_hello_world <- function() {
.Call(`_Data2LD_rcpp_hello_world`)
}
rcpp_hello_world()
source("rcpp_hello_world")
install.packages("pandoc")
getwd()
library(R.matlab)
install.packages("R.matlab")
q()
install.packages("Rcpp")
install.packages("Rccp")
version()
install.packages("Rcpp")
library(Rcpp)
Rcpp.package.skeleton("Data2LD")
getwd()
install.packages(c("kntr", "rmarkdown"))
library(knitr)
library(rmarkdown)
library(fda)
install.packages(c("fda", "desolve"))
install.packages("deSolve")
library(deSolve)
install.packages("devtools")
library(devtools)
q()
library(fda)
library(deSolve)
library(Rcpp)
setwd("~/Documents/R")
q()
getwd()
library(fda)
install.packages("fda")
library(fda)
source('~/Documents/R/fda/fda/R/funcint.R')
source('~/Documents/R/fda/fda/R/funcint.R')
source('~/Documents/R/fda/fda/R/funcint.R')
source('~/Documents/R/fda/fda/R/funcint.R')
help("hist")
q()
library(fda)
load lip
load("lip.rda")
load("fda/fda/data/lip.rda")
lipfd = smooth.basis(liptime, lip, 6, Lfdobj=int2Lfd(4))
lipfd = smooth.basis(liptime, lip, 6, Lfdobj=int2Lfd(4), lambda=1e-12)$fd
help("smooth.basis")
lipfd = smooth.basisPar(liptime, lip, 6, Lfdobj=int2Lfd(4), lambda=1e-12)$fd
names(lipfd$fdnames) = c("time(seconds)", "replications", "mm")
lipbasis = lipfd$basis
xfdlist = list(lipfd)
bwtlist = list(fdPar(lipbasis,2,0), fdPar(lipbasis,2,0))
xfdlist1 = xfdlist
pdaList = pda.fd(xfdlist1, bwtlist)
traceback
traceback()
awtlist=NULL
ufdlist=NULL
nfine=501
if (inherits(xfdlist, "fd")) xfdlist = list(xfdlist)
if (!inherits(xfdlist, "list")) stop(
"XFDLIST is neither a list or a FD object")
nvar <- length(xfdlist)
nvar
difeorder <- length(bwtlist)
difeordp1 <- difeorder + 1
xfdobj <- xfdlist[[1]]
xbasis <- xfdobj$basis
xcoef  <- xfdobj$coefs
xrange <- xbasis$rangeval
nforce  <- 0
difeorder == 0 && nforce == 0
ncurve     <- dim(xcoef)[2]
nbasmax <- xbasis$nbasis
ncurve
if (inherits(bwtlist[[1]],"list")) {
temp <- vector("list",difeorder)
for (j in 1:nvar) {
if (inherits(bwtlist[[1]][[j]], "list")) {
bwtlist[[1]][[j]] <- bwtlist[[1]][[j]][[1]]
}
temp[[j]] <- bwtlist[[1]][[j]]
}
bwtlist <- temp
}
errorwrd <- FALSE
for (j in 1:difeorder) {
if (!is.null(bwtlist[[j]])) {
bfdParj <- bwtlist[[j]]
if (!inherits(bfdParj,"fdPar")) {
print(paste(
"BWTLIST[[",j,"]] is not a functional parameter object.",sep=""))
errorwrd <- TRUE
}  else {
bfdj <- bfdParj$fd
if (!inherits(bfdj, "fd")) {
print(paste(
"BFDJ in BWTLIST[[",j,"]] is not a functional data object.",
sep=""))
errorwrd <- TRUE
} else {
basisj <- bfdj$basis
if (any(basisj$rangeval != xrange)) print(paste(
"Ranges are incompatible for BWTLIST[[",j,"]].",sep=""))
}
}
nbasmax <- max(c(nbasmax,basisj$nbasis))
}
}
if (errorwrd) stop("")
if (nfine < 5*nbasmax) nfine <- 5*nbasmax
deltax <- (xrange[2]-xrange[1])/(nfine-1)
tx     <- seq(xrange[1],xrange[2],deltax)
#  set up  YARRAY to hold values of x functions and their derivatives
yarray <- array(0,c(nfine,ncurve,difeordp1))
for (j in 1:difeordp1) yarray[,,j] <- eval.fd(tx, xfdobj, j-1)
#  set up  UARRAY to hold values of u functions
if (nforce > 0) {
uarray <- array(0,c(nfine,ncurve,nforce))
for (iu in 1:nforce)
uarray[,,iu] <- eval.fd(tx, ufdlist[[iu]])
}
#  set up array YPROD to hold mean of products of values in YARRAY
yprod <- array(0,c(nfine,difeordp1,difeordp1))
for (j1 in 1:difeordp1) for (j2 in 1:j1) {
if (ncurve == 1) yprodval <- yarray[,1,j1]*yarray[,1,j2]
else             yprodval <- apply(yarray[,,j1]*yarray[,,j2],1,mean)
yprod[,j1,j2] <- yprodval
yprod[,j2,j1] <- yprodval
}
onesn <- rep(1,nfine)
#  set up array to hold coefficients for basis expansions
if (nforce > 0) {
aarray <- matrix(0,nfine,nforce)
} else {
aarray <- NULL
}
barray <- matrix(0,nfine,difeorder)
neqns  <- 0
for (j1 in 1:difeorder) {
if (!is.null(bwtlist[[j1]])) {
bfdParj <- bwtlist[[j1]]
if (bfdParj$estimate)
neqns <- neqns + bfdParj$fd$basis$nbasis
}
}
cmat   <- matrix(0,neqns, neqns)
dmat   <- matrix(0,neqns, 1)
for (j1 in 1:difeorder) {
if (!is.null(bwtlist[[j1]])) {
bfdParj     <- bwtlist[[j1]]
bvecj       <- eval.fd(tx, bfdParj$fd)
barray[,j1] <- bvecj
}
}
difeorder
j1 = 1
bfdParj     <- bwtlist[[j1]]
bvecj       <- eval.fd(tx, bfdParj$fd)
dim(barray)
dim(bvecj)
dim(tx)
length(tx)
bfd = bfdParj$fd
dim(bfd$coefs)
j1
class(bwtlist[[j1]])
bwtlist
bwtlist[[1]]
length(bwtlist)
bwtcoef = matrix(0,55,1)
nlipbasis = lipbasis$nbasis
nlipbasis
bwtcoef = matrix(0,nlipbasis,1)
bwtfd = fd(bwtcoef, lipbasis)
bwtfdPar = fdPar(bwtfd,2,0)
bwtlist = list(bwtfdPar,bwtfdPar)
pdaList = pda.fd(xfdlist, bwtlist)
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
help("Rcpp.package.skeleton")
help("Rcpp.package.skeleton")
help("Rcpp.package.skeleton")
code_files = c("~/Documents/R/Data2LDRcpp/R/Atensorfn.R",
"~/Documents/R/Data2LDRcpp/R/BAtensorfn.R",
"~/Documents/R/Data2LDRcpp/R/Btensorfn.R",
"~/Documents/R/Data2LDRcpp/R/checkModel.R",
"~/Documents/R/Data2LDRcpp/R/Data2LD.opt.R",
"~/Documents/R/Data2LDRcpp/R/Data2LD.R",
"~/Documents/R/Data2LDRcpp/R/funexplinear.R",
"~/Documents/R/Data2LDRcpp/R/funDexplinear.R",
"~/Documents/R/Data2LDRcpp/R/getForceterm.R",
"~/Documents/R/Data2LDRcpp/R/getHomoTerm.R",
"~/Documents/R/Data2LDRcpp/R/inprod.TPbasis.R",
"~/Documents/R/Data2LDRcpp/R/make.Fterm.R",
"~/Documents/R/Data2LDRcpp/R/make.Xterm.R",
"~/Documents/R/Data2LDRcpp/R/make.Variable.R",
"~/Documents/R/Data2LDRcpp/R/modelList2Vec.R",
"~/Documents/R/Data2LDRcpp/R/modelVec2List.R",
"~/Documents/R/Data2LDRcpp/R/printMatrix.R",
"~/Documents/R/Data2LDRcpp/R/printModel.R")
cpp_files = c("~/Documents/R/Data2LDRcpp/src/DASarrayFnCpp",
"~/Documents/R/Data2LDRcpp/src/DBSarrayFnCpp",
"~/Documents/R/Data2LDRcpp/src/DRarrayFnCpp",
"~/Documents/R/Data2LDRcpp/src/loopJuanCpp",
"~/Documents/R/Data2LDRcpp/src/RmatFnCpp",
"~/Documents/R/Data2LDRcpp/src/SmatCpp")
Rcpp.package.skeleton(name="Data2LD2",
code_files=code_files,
cpp_files =cpp_files,
author="James Ramsay",
maintainer="James Ramsay")
code_files = c("~/Documents/R/Data2LDRcpp/R/Atensorfn.R",
"~/Documents/R/Data2LDRcpp/R/BAtensorfn.R",
"~/Documents/R/Data2LDRcpp/R/Btensorfn.R",
"~/Documents/R/Data2LDRcpp/R/checkModel.R",
"~/Documents/R/Data2LDRcpp/R/Data2LD.opt.R",
"~/Documents/R/Data2LDRcpp/R/Data2LD.R",
"~/Documents/R/Data2LDRcpp/R/fun.explinear.R",
"~/Documents/R/Data2LDRcpp/R/fun.Dexplinear.R",
"~/Documents/R/Data2LDRcpp/R/getForceterm.R",
"~/Documents/R/Data2LDRcpp/R/getHomoTerm.R",
"~/Documents/R/Data2LDRcpp/R/inprod.TPbasis.R",
"~/Documents/R/Data2LDRcpp/R/make.Fterm.R",
"~/Documents/R/Data2LDRcpp/R/make.Xterm.R",
"~/Documents/R/Data2LDRcpp/R/make.Variable.R",
"~/Documents/R/Data2LDRcpp/R/modelList2Vec.R",
"~/Documents/R/Data2LDRcpp/R/modelVec2List.R",
"~/Documents/R/Data2LDRcpp/R/printMatrix.R",
"~/Documents/R/Data2LDRcpp/R/printModel.R")
Rcpp.package.skeleton(name="Data2LD2",
code_files=code_files,
cpp_files =cpp_files,
author="James Ramsay",
maintainer="James Ramsay")
Rcpp.package.skeleton(name="Data2LD2",
code_files=code_files,
cpp_files =cpp_files,
author="James Ramsay",
maintainer="James Ramsay",
force=TRUE)
source('~/Documents/R/Data2LD2/R/Btensorfn.R')
source('~/Documents/R/Data2LD2/R/Btensorfn.R')
source('~/Documents/R/Data2LD2/demo/CruiseControl.R')
source('~/Documents/R/Data2LD2/R/Data2LD.R')
cpp_files = c("~/Documents/R/Data2LDRcpp/src/DASarrayFnCpp",
"~/Documents/R/Data2LDRcpp/src/DBSarrayFnCpp",
"~/Documents/R/Data2LDRcpp/src/DRarrayFnCpp",
"~/Documents/R/Data2LDRcpp/src/loopJuanCpp",
"~/Documents/R/Data2LDRcpp/src/RmatFnCpp",
"~/Documents/R/Data2LDRcpp/src/SmatFnCpp")
Rcpp.package.skeleton(name="Data2LD2",
code_files=code_files,
cpp_files =cpp_files,
author="James Ramsay",
maintainer="James Ramsay",
attributes=FALSE,
force=TRUE)
Rcpp.package.skeleton(name="Data2LD2",
code_files=code_files,
cpp_files =cpp_files,
author="James Ramsay",
maintainer="James Ramsay",
attributes=FALSE,
force=TRUE)
library(knitr)
install.packages("knitr")
install.packages("knitr")
install.packages("rmarkdown")
library(deSolve)
install.packages("deSolve")
library(deSolve)
library(fda)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(fda)
library(deSolve)
library(fda)
library(Rcpp)
help("compileAttributes.R")
help("compileAttributes")
compileAttributes("Data2LD2")
vignette("Rcpp-package")
vignette("Rcpp-attributes")
vignette("Rcpp-modules")
vignette("Rcpp-quickref")
q()
library(fda)
library(deSolve)
library(Rcpp)
install.packages("RcppExamples")
getwd()
help("computeAttributes")
library(fda)
library(Rcpp)
library(deSolve)
help("computeAttributes")
help("compileAttributes")
compileAttributes(pkg=Data2LD)
compileAttributes(pkg=Data2LD2)
getwd()
setwd(Data2LD)
compileAttributes(pkg="Data2LD2")
q()
q()
source('~/Documents/R/Data2LD/R/Data2LD.R')
q()
source('~/Documents/MATLAB/Data2LD_Matlab/Examples/Bombay/NewRfuns.R')
source('~/Documents/MATLAB/Data2LD_Matlab/Examples/Bombay/find.dim.R')
source('~/Documents/MATLAB/Data2LD_Matlab/Examples/Bombay/make.betafd.R')
source('~/Documents/MATLAB/Data2LD_Matlab/Examples/Bombay/make.betaDfd.R')
source('~/Documents/MATLAB/Data2LD_Matlab/Examples/Bombay/make.termmat.R')
source('~/Documents/MATLAB/Data2LD_Matlab/Examples/Bombay/make.Dtermmat.R')
source('~/Documents/MATLAB/Data2LD_Matlab/Examples/Bombay/NewRfuns.R')
source('~/Documents/R/Data2LD/R/Data2LD.R')
source('~/Documents/R/Data2LD/R/Data2LD.R')
install.packages("shiny")
library(shiny)
help("shiny")
runexample("01_hello")
runExample("01_hello")
q()
source('~/Documents/R/Data2LD/R/make.Xterm.R')
source('~/Documents/R/Data2LD/R/make.Xterm.R')
source('~/Documents/R/Data2LD/R/make.Fterm.R')
source('~/Documents/R/Data2LD/R/make.Xterm.R')
q()
q()
install.packages("fds")
library(fds)
help("fds")
demo
demo()
q()
q()
q()
setwd("fda_work/fda")
library(Data2LD)
class(temp)
temp
q()
q()
getwd()
q()
