Qveci     <- pracma::interp1(denscdfi, indfinei, pvec)
#  ----------------------------------------------------------
#  Step 1:  Bin the data, and smooth the binned data
#  ----------------------------------------------------------
#  Juan:  These dont seem to be needed in the cycles
# thetaQnt = thetaQnti
# thetavec = thetaveci
# dataList = Quant_dataList
# Qvec     =  Qveci
WfdResult <- Wbinsmth(thetaQnti, thetaveci, Quant_dataList, Qveci)
WfdListi  <- WfdResult$WfdList
binctri   <- WfdResult$aves
bdryi     <- WfdResult$bdry
freqi     <- WfdResult$freq
# Juan:  Again, would rather that this version not plot anything, and
# especially within the cycles
# #  ----------------------------------------------------------
# #  Step 1.5:  Plot
# #  ----------------------------------------------------------
# if (pltw)
# {
#   twoplot   <- TRUE
#   ptsplot   <- TRUE
#   cnfplot   <- FALSE
#   Wtype     <- FALSE
#   alltype   <- TRUE
#   mssplot   <- FALSE
#   landscape <- TRUE
#   saveplt   <- FALSE
#   plotindex <- 1:n
#
#   Wbinsmth.plot(binctri, titlestr, Qveci, WfdListi, key, indfine, twoplot, ptsplot,
#                 cnfplot, Wtype, alltype, mssplot, landscape, saveplt, plotindex)
# }
#  ----------------------------------------------------------
#  Step 2:  Compute optimal score index values
#  ----------------------------------------------------------
start_time <- Sys.time()
thetafunList <- thetafun(thetaveci, WfdListi, logdensfdi, Quant_dataList)
end_time <- Sys.time()
end_time - start_time
#  Juan:  This is about 2.7 times the time required in Matlab.  This seems
#  acceptable.
thetaveci <- thetafunList$theta_out
Hvali     <- thetafunList$Hval
meanHi    <- mean(Hvali)
meanHsave[icycle+1] <- meanHi
#  ----------------------------------------------------------
#  Step 3:  Estimate the score density for score index values
#  ----------------------------------------------------------
thetadensi <- thetaveci[0 < thetaveci & thetaveci < 100]
theta.distnList <- theta.distn(thetadensi, logdensfd)
logdensfdi <- theta.distnList$logdensfd
denscdfi   <- as.numeric(theta.distnList$denscdf)
Ci         <- theta.distnList$C
densfinei  <- theta.distnList$densfine
#
# # Plot
# if (pltt)
# {
#   print(thetap$thetaPlot)
# }
#  ----------------------------------------------------------
#  Step 4:  estimate expected test scores and arc length scores
#  ----------------------------------------------------------
#  arc length test score
arclenListi <- theta2arclen(thetaveci, WfdListi, indrng, Wdim)
#  ----------------------------------------------------------
#  Step 5:  set up ParameterCell arrays
#  ----------------------------------------------------------
#  Juan:  we should make explcit and visible the members of list DListi
#  so that users can access this information
#  Ive also added other objects that a user might need
ParameterListi <- list(
WfdList    = WfdListi,
arclenList = arclenListi,
binctr     = binctri,
bdry       = bdryi,
freq       = freqi,
logdensfd  = logdensfdi,
denscdf    = denscdfi,
theta      = thetaveci,
densfine   = densfinei,
Qvec       = Qveci,
C          = Ci
)
Quant_dataResult[[icycle]] <- ParameterListi
}
plot(meanHvec)
plot(meanHsave)
plot(1:ncycle+1,meanHsave, type="b")
plot(1:(ncycle+1),meanHsave, type="b")
plot(1:(ncycle+1),meanHsave, type="b", lwd=4)
cycleno = 0:ncycle
plot(cycleno,meanHsave, type="b", lwd=2)
icycle = 8
ParameterList <- Quant_dataResult[icycle]
plot(1:(ncycle+1),meanHsave, type="b", lwd=2)
names(ParameterList)
names(ParameterList[[icycle]]
)
length(ParameterList)
class(ParameterList)
ParameterList
WfdList = ParameterList$WfdList
names(WfdList)
densfine = WfdList$densfine
plot(densfine)
densfine
names(Quant_dataResult[[8]])
densfine = Quant_dataResult[[8]]$densfine
plot(densfine)
plot(indfine, densfine, type="l", lwd=2, xlab="Percentile Rank", ylab="Density")
plot(indfine, densfine, type="l", lwd=2, ylim=c(0,0.0250,
xlab="Percentile Rank", ylab="Density")
plot(indfine, densfine, type="l", lwd=2, ylim=c(0,0.025),
xlab="Percentile Rank", ylab="Density")
lines(c(0,100), c(N/100,N/100), lty=2)
N
lines(c(0,100), c(1/100,1/100), lty=2)
theta    <- Quant_dataResult[icycle]$theta
thetazero <- length(theta[theta == 0])
thetacent <- length(theta[theta == 100])
lines(c(0,0) c(thetazero/N,thetazero/N), lty=1, lwd=4)
lines(c(0,0), c(thetazero/N,thetazero/N), lty=1, lwd=4)
thetazero
min(theta)
theta     <- Quant_dataResult[icycle]$theta
theta
theta     <- Quant_dataResult[[icycle]]$theta
theta     <- Quant_dataResult[[icycle]]$theta
thetazero <- length(theta[theta == 0])
thetacent <- length(theta[theta == 100])
thetazero
thetacent
lines(c(0,0), c(thetazero/N,thetazero/N), lty=1, lwd=4)
lines(c(0,0), c(0,thetazero/N), lty=1, lwd=4)
lines(c(100,100), c(0,thetacent/N), lty=1, lwd=4)
print(paste("Number of indices =   0:", thetazero))
print(paste("Number of indices = 100:", thetacent))
WfdList <- Quant_dataResult[[icycle]]$WfdList
names(WfdList)
names(Quant_dataResult[[icycle]])
names(Quant_dataResult[[icycle]]$WfdList)
WfdList <- Quant_dataResult[[icycle]]$WfdList
mu <- testscore(theta, WfdList, Quant_ScoreList)
mu <- testscore(theta, WfdList, ScoreList)
help("histogram")
histogram(breaks=0:24, mu)
lattice::histogram(breaks=0:24, mu)
mufine = testscore(indfine, WfdList, ScoreList)
plot(indfine, mufine, type="l", lwd=2, xlim=c(0,100, ylim=c(0,24))
plot(indfine, mufine, type="l", lwd=2,
xlab="Percentile Index", ylab="Expected Test Score",
xlim=c(0,100), ylim=c(0,24))
lines(c(0,100), c(0,24), lty=2)
arclenList <- Quant_dataResult[[icycle]]$arclenList
names(arclenList)
arclenList <- Quant_dataResult[[icycle]]$arclenList
print(paste("Arc length =",arclenList$arclength))
print(paste("Arc length =",round(arclenList$arclength,2))
)
arclengthfine <- Quant_dataResult[[icycle]]$arclengthfine
plot(indfine, arclengthfine, type="l", lwd=2,
xlab="Percentile Index", ylab="arc length",
xlim=c(0,100), ylim=c(0,arclength))
lines(c(0,100), c(0,arclength), lty=2)
arclength
print(paste("Arc length =",round(arclenList$arclength,2)))
arclength <- arclenList$arclength
arclength
plot(indfine, arclengthfine, type="l", lwd=2,
xlab="Percentile Index", ylab="arc length",
xlim=c(0,100), ylim=c(0,arclength))
lines(c(0,100), c(0,arclength), lty=2)
arclengthfine <- arclenList$arclengthfine
plot(indfine, arclengthfine, type="l", lwd=2,
xlab="Percentile Index", ylab="arc length",
xlim=c(0,100), ylim=c(0,arclength))
lines(c(0,100), c(0,arclength), lty=2)
arclength/n
names(arclenList)
q()
q()
q()
source('~/Documents/R/fda_work/fda/R/fRegress.numeric.R')
source('~/Documents/R/fda_work/fda/R/fRegress.formula.R')
source('~/Documents/R/fda_work/fda/R/fRegressArgCheck.R')
library(fda)
TempRgn.mdl <- fRegress(tempfd ~ region, CanadianWeather, method='f')
#  data are in Canadian Weather object
#  print the names of the data
print(names(CanadianWeather))
#  set up log10 of annual precipitation for 35 weather stations
annualprec <- log10(apply(CanadianWeather$dailyAv[,,"Precipitation.mm"], 2,sum))
# The simplest 'fRegress' call is singular with more bases
# than observations, so we use only 25 basis functions, for this example
smallbasis  <- create.fourier.basis(c(0, 365), 25)
# The covariate is the temperature curve for each station.
tempfd <- smooth.basis(day.5,
CanadianWeather$dailyAv[,,"Temperature.C"], smallbasis)$fd
TempRgn.mdl <- fRegress(tempfd ~ region, CanadianWeather, method='f')
debug(fRegress)
TempRgn.mdl <- fRegress(tempfd ~ region, CanadianWeather, method='f')
source('~/Documents/R/fda_work/fda/R/fRegress.formula.R')
source('~/Documents/R/fda_work/fda/R/fRegress.formula.R')
source('~/Documents/R/fda_work/fda/R/fRegress.R')
help("debug")
undebug(fRegress.formula)
help("undebug")
source('~/Documents/R/fda_work/fda/R/fRegress.R')
TempRgn.mdl <- fRegress(tempfd ~ region, CanadianWeather, method='m')
class(TempRgn.mdl)
names(TempRgn.mdl)
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
library(fda)
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
source('~/Documents/R/fda_work/fda/R/fRegress.R')
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
region.contrasts <- model.matrix(~factor(CanadianWeather$region))
rgnContr3 <- region.contrasts
dim(rgnContr3) <- c(1, 35, 4)
dimnames(rgnContr3) <- list('', CanadianWeather$place, c('const',
paste('region', c('Atlantic', 'Continental', 'Pacific'), sep='.')) )
const365 <- create.constant.basis(c(0, 365))
region.fd.Atlantic <- fd(matrix(rgnContr3[,,2], 1), const365)
str(region.fd.Atlantic)
region.fd.Continental <- fd(matrix(rgnContr3[,,3], 1), const365)
region.fd.Pacific <- fd(matrix(rgnContr3[,,4], 1), const365)
region.fdlist <- list(const=rep(1, 35),
region.Atlantic=region.fd.Atlantic,
region.Continental=region.fd.Continental,
region.Pacific=region.fd.Pacific)
str(TempRgn.mdl$betalist)
beta1 <- with(tempfd, fd(basisobj=basis, fdnames=fdnames))
beta0 <- fdPar(beta1)
betalist <- list(const=beta0, region.Atlantic=beta0,
region.Continental=beta0, region.Pacific=beta0)
TempRgn <- fRegress(tempfd, region.fdlist, betalist)
all.equal(TempRgn, TempRgn.f)
gaittime  <- as.matrix((1:20)/21)
gaitrange <- c(0,20)
gaitbasis <- create.fourier.basis(gaitrange, nbasis=21)
harmaccelLfd <- vec2Lfd(c(0, (2*pi/20)^2, 0), rangeval=gaitrange)
gaitfd <- smooth.basisPar(gaittime, gait, gaitbasis,
Lfdobj=harmaccelLfd, lambda=1e-2)$fd
hipfd  <- gaitfd[,1]
kneefd <- gaitfd[,2]
knee.hip.f <- fRegress(kneefd ~ hipfd)
const  <- rep(1, dim(kneefd$coef)[2])
xfdlist  <- list(const=const, hipfd=hipfd)
beta0 <- with(kneefd, fd(basisobj=basis, fdnames=fdnames))
beta1 <- with(hipfd, fd(basisobj=basis, fdnames=fdnames))
betalist  <- list(const=fdPar(beta0), hipfd=fdPar(beta1))
fRegressout <- fRegress(kneefd, xfdlist, betalist)
all.equal(fRegressout, knee.hip.f)
q()
#  data are in Canadian Weather object
#  print the names of the data
print(names(CanadianWeather))
#  set up log10 of annual precipitation for 35 weather stations
annualprec <- log10(apply(CanadianWeather$dailyAv[,,"Precipitation.mm"], 2,sum))
# The simplest 'fRegress' call is singular with more bases
# than observations, so we use only 25 basis functions, for this example
smallbasis  <- create.fourier.basis(c(0, 365), 25)
# The covariate is the temperature curve for each station.
tempfd <- smooth.basis(day.5,
CanadianWeather$dailyAv[,,"Temperature.C"], smallbasis)$fd
library(fda)
print(names(CanadianWeather))
#  set up log10 of annual precipitation for 35 weather stations
annualprec <- log10(apply(CanadianWeather$dailyAv[,,"Precipitation.mm"], 2,sum))
# The simplest 'fRegress' call is singular with more bases
# than observations, so we use only 25 basis functions, for this example
smallbasis  <- create.fourier.basis(c(0, 365), 25)
# The covariate is the temperature curve for each station.
tempfd <- smooth.basis(day.5,
CanadianWeather$dailyAv[,,"Temperature.C"], smallbasis)$fd
TempRgn.mdl <- fRegress(tempfd ~ region, CanadianWeather, method='m')
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
# no change, so match the first run
\dontshow{stopifnot(}
all.equal(TempRgn.m, TempRgn.f)
\dontshow{)}
region.contrasts <- model.matrix(~factor(CanadianWeather$region))
rgnContr3 <- region.contrasts
dim(rgnContr3) <- c(1, 35, 4)
dimnames(rgnContr3) <- list('', CanadianWeather$place, c('const',
paste('region', c('Atlantic', 'Continental', 'Pacific'), sep='.')) )
const365 <- create.constant.basis(c(0, 365))
region.fd.Atlantic <- fd(matrix(rgnContr3[,,2], 1), const365)
str(region.fd.Atlantic)
region.fd.Continental <- fd(matrix(rgnContr3[,,3], 1), const365)
region.fd.Pacific <- fd(matrix(rgnContr3[,,4], 1), const365)
region.fdlist <- list(const=rep(1, 35),
region.Atlantic=region.fd.Atlantic,
region.Continental=region.fd.Continental,
region.Pacific=region.fd.Pacific)
str(TempRgn.mdl$betalist)
beta1 <- with(tempfd, fd(basisobj=basis, fdnames=fdnames))
beta0 <- fdPar(beta1)
betalist <- list(const=beta0, region.Atlantic=beta0,
region.Continental=beta0, region.Pacific=beta0)
TempRgn <- fRegress(tempfd, region.fdlist, betalist)
const365 <- create.constant.basis(c(0, 365))
region.fd.Atlantic <- fd(matrix(rgnContr3[,,2], 1), const365)
str(region.fd.Atlantic)
region.fd.Continental <- fd(matrix(rgnContr3[,,3], 1), const365)
region.fd.Pacific <- fd(matrix(rgnContr3[,,4], 1), const365)
region.fdlist <- list(const=rep(1, 35),
region.Atlantic=region.fd.Atlantic,
region.Continental=region.fd.Continental,
region.Pacific=region.fd.Pacific)
str(TempRgn.mdl$betalist)
beta1 <- with(tempfd, fd(basisobj=basis, fdnames=fdnames))
beta0 <- fdPar(beta1)
betalist <- list(const=beta0, region.Atlantic=beta0,
region.Continental=beta0, region.Pacific=beta0)
TempRgn <- fRegress(tempfd, region.fdlist, betalist)
TempRgn.mdl <- fRegress(tempfd ~ region, CanadianWeather, method='m')
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
TempRgn.mdl <- fRegress(tempfd ~ region, CanadianWeather, method='m')
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
q()
library(fda)
debug(predict.fRegress)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2,10,20, labels=c("Ctl","Trt"))
weight <- c(ctl, trt)
fRegress.D9 <- fRegress(weight ~ group)
annualprec <- log10(apply(CanadianWeather$dailyAv[,,
"Precipitation.mm"], 2,sum))
smallbasis  <- create.fourier.basis(c(0, 365), 25)
tempfd <- smooth.basis(day.5,
CanadianWeather$dailyAv[,,"Temperature.C"], smallbasis)$fd
precip.Temp.f <- fRegress(annualprec ~ tempfd)
precip.Temp.p <- predict(precip.Temp.f)
plot(annualprec, precip.Temp.p)
source('~/Documents/R/fda_work/fda/R/fRegressArgCheck.R')
fRegress.D9 <- fRegress(weight ~ group)
library(fda)
fRegress.D9 <- fRegress(weight ~ group)
source('~/Documents/R/fda_work/fda/R/predict.fRegress.R')
fRegress.D9 <- fRegress(weight ~ group)
} else {
allscalar <- TRUE
for (j in 1:p) {
if (inherits(xfdlist[[j]], "fd")) {
rangeval <- xfdlist[[j]]$basis$rangeval
allscalar <- FALSE
break
}
}
source('~/Documents/R/fda_work/fda/R/fRegressArgCheck.R')
fRegress.D9 <- fRegress(weight ~ group)
library(fda)
fRegress.D9 <- fRegress(weight ~ group)
q()
rm(list=ls())
library(fda)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2,10,20, labels=c("Ctl","Trt"))
weight <- c(ctl, trt)
fRegress.D9 <- fRegress(weight ~ group)
debug(predict.fRegress)
fRegress.D9 <- fRegress(weight ~ group)
source('~/Documents/R/fda_work/fda/R/fRegressArgCheck.R')
fRegress.D9 <- fRegress(weight ~ group)
fRegress.D9 <- fRegress(weight ~ group)
q()
q()
library(fda)
print(names(CanadianWeather))
#  set up log10 of annual precipitation for 35 weather stations
annualprec <- log10(apply(CanadianWeather$dailyAv[,,"Precipitation.mm"], 2,sum))
# The simplest 'fRegress' call is singular with more bases
# than observations, so we use only 25 basis functions, for this example
smallbasis  <- create.fourier.basis(c(0, 365), 25)
# The covariate is the temperature curve for each station.
tempfd <- smooth.basis(day.5,
CanadianWeather$dailyAv[,,"Temperature.C"], smallbasis)$fd
daybasis65 <- create.fourier.basis(rangeval=c(0, 365), nbasis=65,
axes=list('axesIntervals'))
Temp.fd <- with(CanadianWeather, smooth.basisPar(day.5,
dailyAv[,,'Temperature.C'], daybasis65)$fd)
TempRgn.f <- fRegress(Temp.fd ~ region, CanadianWeather)
TempRgn.mdl <- fRegress(tempfd ~ region, CanadianWeather, method='m')
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
all.equal(TempRgn.m, TempRgn.f)
names(TempRgn.f)
names(TempRgn.m)
TempRgn.f$yfdobj
yfdobj.m = TempRgn.m$yfdobj
yfdobj.f = TempRgn.f$yfdobj
dim(yfdobj.m)
dim(yfdobj.f)
length(yfdobj.m)
length(yfdobj.f)
class(yfdobj.f)
dim(yfdobj.f$coefs)
dim(yfdobj.m$coefs)
TempRgn.mdl <- fRegress(Tempfd ~ region, CanadianWeather, method='m')
# make desired modifications here
# then run
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
all.equal(TempRgn.m, TempRgn.f)
TempRgn.mdl <- fRegress(Temp.fd ~ region, CanadianWeather, method='m')
TempRgn.m <- do.call('fRegress', TempRgn.mdl)
all.equal(TempRgn.m, TempRgn.f)
help("is.matrix")
source('~/Documents/R/fda_work/fda/R/fRegressArgCheck.R')
source('~/Documents/R/fda_work/fda/R/fRegressArgCheck.R')
source('~/Documents/R/fda_work/fda/R/fRegressArgCheck.R')
source('~/Documents/R/fda_work/fda/R/fRegressArgCheck.R')
debug(fRegress.numeric)
source('~/Documents/R/fda_work/fda/R/fRegress.numeric.R')
source('~/Documents/R/fda_work/fda/R/fRegressArgCheck.R')
source('~/Documents/R/fda_work/fda/R/fRegress.formula.R')
source('~/Documents/R/fda_work/fda/R/fRegress.numeric.R')
q()
source('~/Documents/R/fda_work/fda/R/fRegress.double.R')
source('~/Documents/R/fda_work/fda/R/fRegress.double.R')
source('~/Documents/R/fda_work/fda/R/fRegress.double.R')
source('~/Documents/R/fda_work/fda/R/fRegress.R')
install.packages(c("backports", "codetools", "tinytex"))
library()
library
library(packages)
help("library")
installed.packages()
library(devtools)
PkgDir <- 'fda'
(d0 <- file.path('~', 'Documents'))
# This works on my Mac but not on my Win10 machine
(d1 <- dir(d0, '^current$', full.names=TRUE))
if(length(d1)==0){
# This is for my Win10 machine
d2 <- d0
} else d2 <- d1
(d3 <- dir(d2, '^R$', full.names = TRUE))
PkgDir2 <- paste0('^', PkgDir)
(d4 <- dir(d3, PkgDir2, full.names = TRUE))
PkgDir. <- paste0(PkgDir2, '$')
(wd <- dir(d4, PkgDir., full.names = TRUE))
devtools::check()
install.packages("spelling")
library(spelling)
spelling::spell_check_package()
library(fda)
gaittime  <- as.matrix((0:19) + 0.5)
gaitrange <- c(0, 20)
harmaccelLfd <- vec2Lfd(c(0, (2 * pi/20)^2, 0), rangeval = gaitrange)
gaitbasis <- create.fourier.basis(gaitrange, nbasis = 21)
hip_fd <- smooth.basisPar(gaittime, gait[,,1],
gaitbasis, Lfdobj = harmaccelLfd, lambda = 1e-2)$fd
hip_pca_fd <- pca.fd(fdobj = hip_fd, nharm = 5)
rot_hip_pca_fd <- varmx.pca.fd(pcafd = hip_pca_fd)
par(mfrow = c(2, 3))
plot.pca.fd(x = hip_pca_fd)
par(mfrow = c(2, 3))
plot.pca.fd(x = rot_hip_pca_fd)
source('~/Documents/R/fda_work/fda/R/varmx.pca.fd.R')
rhub::check_for_cran()
install.packages("rhub")
library(rhub)
rhub::check_for_cran()
rhub::check_for_cran()
devtools::check_win_devel()
library(revdepcheck)
revdep_reset()
revdep_check(num_workers = 4)
install.packages("revdepcheck")
devtools::release(args = '--resave-data')
rhub::check_for_cran()
help("svd")
devtools::release(args = '--resave-data')
revdep_reset()
library(revdepcheck)
revdep_reset()
getwd()
setwd("/Users/jimramsay/Documents/R/TestGardenerR")
q()
library(rhub)
validate_email()
validate_email()
validate_email()
validate_email()
getwd()
library(devtools)
setwd("fda")
getwd()
devtools::check()
devtools::check_win_dev()
devtools::revdep_check()
library(revdepcheck)
install.packages("revdepcheck")
rhub::check_for_cran()
revdep_reset()
library(revdepcheck)
install.packages("revdepcheck")
devtools::release(args = '--resave-data')
devtools::install_github("r-lib/revdepcheck")
revdep_reset()
library(revdepcheck)
revdep_reset()
revdep_check()
q()
